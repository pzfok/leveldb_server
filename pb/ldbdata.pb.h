// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ldbdata.proto

#ifndef PROTOBUF_ldbdata_2eproto__INCLUDED
#define PROTOBUF_ldbdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ldbdata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ldbdata_2eproto();
void protobuf_AssignDesc_ldbdata_2eproto();
void protobuf_ShutdownFile_ldbdata_2eproto();

class Request;
class Response;

enum Request_Cmd {
  Request_Cmd_GET = 1,
  Request_Cmd_PUT = 2,
  Request_Cmd_DELETE = 3
};
bool Request_Cmd_IsValid(int value);
const Request_Cmd Request_Cmd_Cmd_MIN = Request_Cmd_GET;
const Request_Cmd Request_Cmd_Cmd_MAX = Request_Cmd_DELETE;
const int Request_Cmd_Cmd_ARRAYSIZE = Request_Cmd_Cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Cmd_descriptor();
inline const ::std::string& Request_Cmd_Name(Request_Cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Cmd_descriptor(), value);
}
inline bool Request_Cmd_Parse(
    const ::std::string& name, Request_Cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Cmd>(
    Request_Cmd_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Request_Cmd Cmd;
  static const Cmd GET = Request_Cmd_GET;
  static const Cmd PUT = Request_Cmd_PUT;
  static const Cmd DELETE = Request_Cmd_DELETE;
  static inline bool Cmd_IsValid(int value) {
    return Request_Cmd_IsValid(value);
  }
  static const Cmd Cmd_MIN =
    Request_Cmd_Cmd_MIN;
  static const Cmd Cmd_MAX =
    Request_Cmd_Cmd_MAX;
  static const int Cmd_ARRAYSIZE =
    Request_Cmd_Cmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cmd_descriptor() {
    return Request_Cmd_descriptor();
  }
  static inline const ::std::string& Cmd_Name(Cmd value) {
    return Request_Cmd_Name(value);
  }
  static inline bool Cmd_Parse(const ::std::string& name,
      Cmd* value) {
    return Request_Cmd_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ldbdata.Request.Cmd cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::ldbdata::Request_Cmd cmd() const;
  inline void set_cmd(::ldbdata::Request_Cmd value);
  
  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional bool synflag = 4;
  inline bool has_synflag() const;
  inline void clear_synflag();
  static const int kSynflagFieldNumber = 4;
  inline bool synflag() const;
  inline void set_synflag(bool value);
  
  // @@protoc_insertion_point(class_scope:ldbdata.Request)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_synflag();
  inline void clear_has_synflag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  int cmd_;
  bool synflag_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ldbdata_2eproto();
  friend void protobuf_AssignDesc_ldbdata_2eproto();
  friend void protobuf_ShutdownFile_ldbdata_2eproto();
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 retcode = 1 [default = 1];
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:ldbdata.Response)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  ::google::protobuf::uint32 retcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ldbdata_2eproto();
  friend void protobuf_AssignDesc_ldbdata_2eproto();
  friend void protobuf_ShutdownFile_ldbdata_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .ldbdata.Request.Cmd cmd = 1;
inline bool Request::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::ldbdata::Request_Cmd Request::cmd() const {
  return static_cast< ::ldbdata::Request_Cmd >(cmd_);
}
inline void Request::set_cmd(::ldbdata::Request_Cmd value) {
  GOOGLE_DCHECK(::ldbdata::Request_Cmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional string key = 2;
inline bool Request::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Request::key() const {
  return *key_;
}
inline void Request::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Request::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Request::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 3;
inline bool Request::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Request::value() const {
  return *value_;
}
inline void Request::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Request::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Request::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Request::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool synflag = 4;
inline bool Request::has_synflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_synflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_synflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_synflag() {
  synflag_ = false;
  clear_has_synflag();
}
inline bool Request::synflag() const {
  return synflag_;
}
inline void Request::set_synflag(bool value) {
  set_has_synflag();
  synflag_ = value;
}

// -------------------------------------------------------------------

// Response

// required uint32 retcode = 1 [default = 1];
inline bool Response::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_retcode() {
  retcode_ = 1u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 Response::retcode() const {
  return retcode_;
}
inline void Response::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional string value = 2;
inline bool Response::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Response::value() const {
  return *value_;
}
inline void Response::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Response::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Response::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Response::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ldbdata

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ldbdata::Request_Cmd>() {
  return ::ldbdata::Request_Cmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ldbdata_2eproto__INCLUDED
